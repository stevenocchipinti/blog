---
import { Image } from 'astro:assets';

const buildUrl = (id: string, options: string) =>
  `https://res.cloudinary.com/stevenocchipinti/image/upload/${options}/${id}`

export interface Props {
  src: string
  alt?: string
  originalAspectRatio?: boolean
}

// If I ever want to use this component for local images, I should use this
// except instead of throwing an error, fallback to Cloudinary ... or something
//
// const glob = "/src/content/**/*.{jpeg,jpg,png,gif}"
// const images = import.meta.glob<{ default: ImageMetadata }>(
//   "/src/content/**/*.{jpeg,jpg,png,gif}"
// )
// if (!images[src]) throw new Error(`"${src}" does not exist in glob: "${glob}"`)

const { src: id, alt, originalAspectRatio } = Astro.props
const aspect = originalAspectRatio ? "" : ",ar_1"

const fullSize = 1600
const thumbSize = 600
const blurSize = 20

const href = buildUrl(id, `f_auto,w_${fullSize}`)
const src = buildUrl(id, `f_auto,c_fill,g_auto,w_${thumbSize}${aspect}`)
const blur = buildUrl(id, `f_auto,c_fill,g_auto,w_${blurSize}${aspect}`)
---

<style>
  img {
    display: block;
    width: 100%;
    height: 100%;
    margin: 0 auto;
    border-radius: 1rem;
    background-size: cover;
    object-fit: cover;
  }
</style>

<a href={href} class="glightbox" data-description={alt}>
  <Image
    style={{ backgroundImage: `url(${blur})` }}
    src={src}
    alt={alt || ""}
    inferSize
  />
</a>
