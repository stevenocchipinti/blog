---
const buildUrl = (id: string, resize: boolean, size: number) =>
  `https://res.cloudinary.com/` +
  `stevenocchipinti/image/upload/` +
  (resize ? `f_auto,c_fill,g_auto,w_${size}/` : "f_auto/") +
  id

export interface Props {
  src: string
  alt?: string
}

// If I ever want to use this component for local images, I should use this
// except instead of throwing an error, fallback to Cloudinary ... or something
//
// const glob = "/src/content/**/*.{jpeg,jpg,png,gif}"
// const images = import.meta.glob<{ default: ImageMetadata }>(
//   "/src/content/**/*.{jpeg,jpg,png,gif}"
// )
// if (!images[src]) throw new Error(`"${src}" does not exist in glob: "${glob}"`)

const { src: id, alt } = Astro.props
const size = 600
const href = buildUrl(id, false, size)
const src = buildUrl(id, true, size)
const blur = buildUrl(id, true, 20)
---

<style define:vars={{ size: `${size}px` }}>
  img {
    display: block;
    width: 100%;
    height: 100%;
    margin: 0 auto;
    border-radius: 1rem;
    background-size: cover;
    object-fit: cover;
  }
</style>

<a href={href} class="glightbox">
  <img
    style={{ backgroundImage: `url(${blur})` }}
    src={src}
    alt={alt || ""}
    height={size}
    width={size}
  />
</a>
